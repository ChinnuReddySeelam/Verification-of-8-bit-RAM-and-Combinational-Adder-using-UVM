class driver extends uvm_driver#(transaction);
`uvm_component_utils(driver)
transaction t;
virtual ram_if rif;
  function new(input string inst = "driver", uvm_component parent = null);
    super.new(inst,parent);
  endfunction
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    t = transaction::type_id::create("t");
    if(!uvm_config_db#(virtual ram_if)::get(this,"","rif",rif))
     `uvm_error("DRV", "Unable to access Interface");
  endfunction
virtual task run_phase(uvm_phase phase);
    forever begin
    seq_item_port.get_next_item(t);
    rif.wr   <= t.wr;
    rif.din  <= t.din;
    rif.addr <= t.addr;
      `uvm_info("DRV", $sformatf("DRV -> DUT wr:%0d addr :%0d din:%0d dout:%0d",t.wr, t.addr,t.din, t.dout), UVM_NONE);
    seq_item_port.item_done();
    @(posedge rif.clk);
    if(t.wr == 1'b0)
      @(posedge rif.clk);
    end
endtask
endclass